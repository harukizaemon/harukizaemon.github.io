---
layout: post
title: "Comparing Collections"
alias: /2004/04/comparing-collections.html
categories:
---
After a long week, Achilles finds he has too much time on his hands. His friend the Tortoise takes pity and indulges him with a bit of IM'ing.<table  cellpadding="5" cellspacing="5"><tr><td align="left" valign="top">Achilles:</td><td>I've done nothing but read blog entries this weekend.</td></tr><tr><td align="left" valign="top">Tortoise:</td><td>You must be bored! Anything interesting?</td></tr><tr><td align="left" valign="top">Achilles:</td><td>I just read [an entry](http://www.corvine.org/blog/archives/000002.html) that reminded me of some stuff I refactored during the week.</td></tr><tr><td align="left" valign="top">Tortoise:</td><td>Do you ever get any _real_ work done?</td></tr><tr><td align="left" valign="top">Achilles:</td><td>Now that Java has a `LinkedHashSet` can you think of any reason to use a simple `List` except for "performance" reasons?</td></tr><tr><td align="left" valign="top">Tortoise:</td><td>Won't it just look like a `List`?</td></tr><tr><td align="left" valign="top">Achilles:</td><td>Sort of but, importantly, it's also a `Set`. Since when do you actually mean to add the same item to a `List` more than once? I'm being pedantic here.</td></tr><tr><td align="left" valign="top">Tortoise:</td><td>But it happens, life is full of duplicates.<tr><td align="left" valign="top">Achilles:</td><td>I'm sure it does but I can't think of many examples where that's actually what you want. It just seems too often people use `Lists` when they should actually be using a `Set`. Clearly, `Lists` are useful but `ArrayList` has to be the most abused `Collection` class around<tr><td align="left" valign="top">Tortoise:</td><td>People generally think in terms of `Lists` - it's a simple concept.</td></tr><tr><td align="left" valign="top">Achilles:</td><td>Yes, but people also think that AND and OR mean exactly the opposite. What we think and what we mean aren't always the same and programming is about expressing what you mean.</td></tr><tr><td align="left" valign="top">Tortoise:</td><td>Do people really think about the correct `Collection` type to use?</td></tr><tr><td align="left" valign="top">Achilles:</td><td>No, they probably don't but they should.</td></tr><tr><td align="left" valign="top">Tortoise:</td><td>I try to but I can't guarantee that I won't be lazy and default to `ArrayList`.</td></tr><tr><td align="left" valign="top">Achilles:</td><td>Exactly! And then the code ends up iterating over stuff and assuming a particular order on things that have no order. I see it all the time and this damn `CollectionUtils.isEquals(Collection, Collection)code just makes it worse. Its ludicrous. It basically allows you to compare a `List` with a `Set` and see if the contents are the same. Which is just wrong! A `List` and a `Set` are not the same thing. They are symantically very different and thinking that it's just a matter of comparing the contents is, IMHO, flawed.</td></tr><tr><td align="left" valign="top">Tortoise:</td><td>Which takes us back to your original question - if you want to allow duplicates then you can't use a `Set`, so when would you want to allow dups?</td></tr><tr><td align="left" valign="top">Achilles:</td><td>Very rarely I suspect. In fact how often do you ever want to allow duplicates and how often does order really matter? Part of the problem I think is a misunderstanding of what `equals(Object)` actually means. It implies substitutability and therefore must be reflexive. But many people don't realise that their `equals(Object)` method isn't so that we end up with `a == b` but `b != a`.</td></tr><tr><td align="left" valign="top">Tortoise:</td><td>I've not seen that happen.</td></tr><tr><td align="left" valign="top">Achilles:</td><td>It usually happens with inhreitence and using `instanceof` instead of class comparison.</td></tr><tr><td align="left" valign="top">Tortoise:</td><td>You must have looked at a lot of shitty code!</td></tr><tr><td align="left" valign="top">Achilles:</td><td>You mean you can't tell? Why do you think I bitch so much :-)</td></tr><tr><td align="left" valign="top">Tortoise:</td><td>Ok what if I have a situation where it is possible to have more than one object of the same type and content? That `Collection` could not be stored in a `Set`, correct?</td></tr><tr><td align="left" valign="top">Achilles:</td><td>Correct. So you just want a `Collection`, not a `List`. I repeat NOT A `List`.</td></tr><tr><td align="left" valign="top">Tortoise:</td><td>Then what implementation class do I use?</td></tr><tr><td align="left" valign="top">Achilles:</td><td>The implementation can be a `List` but the variable should be a `Collection` as in `Collection things = new ArrayList();code because a `List` implies ordering and so far you haven't mentioned anything about order being important.</td></tr><tr><td align="left" valign="top">Tortoise:</td><td>Ok so then I decide that ordering is important.</td></tr><tr><td align="left" valign="top">Achilles:</td><td>Sure make it a `List` but the key thing is that you don't just assume that order is important because then people will try and write tests assuming something about the order and then they'll build screens assuming something about the order, etc. etc.</td></tr><tr><td align="left" valign="top">Tortoise:</td><td>I've just remembered...I added a method to compare `Collections` (for that domain object) to see if there had been any changes - there is no check to see if they are the same implementation of `Collection` so i could be iterating over a `List` and a `Set`</td></tr><tr><td align="left" valign="top">Achilles:</td><td>Why can't you just call `Collection.equals(Object)`? Thats what it's for.</td></tr><tr><td align="left" valign="top">Tortoise:</td><td>On the `Collection`?</td></tr><tr><td align="left" valign="top">Achilles:</td><td>Yes. I see people writing "convenience" methods for comparing `Collections` all the time when they already have an `equals(Object)` method that does a perfectly good job.</td></tr><tr><td align="left" valign="top">Tortoise:</td><td>I assumed that it wouldn't do a deep comparison.</td></tr><tr><td align="left" valign="top">Achilles:</td><td>It iterates over the contents, calling `equals(Object)` and or checking object identity (whatever is appropriate for the `Collection`). I use `assertEquals(Object, Object)code on `Collections` all the time.<tr><td align="left" valign="top">Tortoise:</td><td>Hmmm, that didn't get picked up in the tech review.</td></tr><tr><td align="left" valign="top">Achilles:</td><td>Probably because everyone on the project uses `CollectionUtils.isEqual(Collection, Collection)code!</td></tr></table>
